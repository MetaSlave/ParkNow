@page "/bookings"
@using Microsoft.AspNetCore.Authorization
@inject IBookingService BookingService
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>My Bookings</PageTitle>
<AuthorizeView>
    <Authorized> 
        <MudPaper Height="500px" Width="100%">
            <MudContainer Fixed="true">
                <div class="d-flex flex-row align-center justify-center pt-4 pb-4">
                    <MudText class="mr-2"Typo="Typo.h6">Your Bookings</MudText>
                    <MudSpacer/>
                </div>
                <div style="height: 400px; overflow: auto;">
                    <MudTable Items="@User_Bookings" Hover="true" Breakpoint="Breakpoint.Sm" Virtualize="true" LoadingProgressColor="Color.Info" Class="overflow-auto">
                        <RowTemplate Context="col">
                            <div class="d-flex flex-row align-center justify-left gap-2 pt-4 pb-4">
                                <MudIconButton class="ml-2" Icon="@Icons.Material.Filled.ExpandMore" OnClick="@(() => ToggleExpand(col))" Size="Size.Medium"/>
                                <MudIcon class="mr-4" Icon="@Icons.Material.Filled.LocalParking" Size="Size.Large"></MudIcon>
                                <MudText Style="">@col.BookingTime.ToString("hh:mm tt dd MMMM yyyy")</MudText>
                                <MudSpacer></MudSpacer>
                                <div class="d-flex flex-column flex-sm-row align-center gap-2 mr-6">
                                    <MudChip T="string" Color="@(GetStatusColor(col.Status))" Size="Size.Medium">@col.Status</MudChip>
                                    <MudButton @onclick="OpenBookingInfoAsync" 
                                            EndIcon="@Icons.Material.Filled.Edit" 
                                            IconSize="Size.Small">Edit</MudButton>
                                </div>
                            </div>
                        </RowTemplate>
                        <ChildRowContent Context="col">
                            @if (expandedRows.Contains(col)) {
                                <MudTr>
                                    <MudCard Elevation="0">
                                        <MudCardContent Style="max-height: 200px; overflow-y: auto;">
                                            <div class="d-flex flex-column gap-4">
                                                <div class="d-flex" style="word-wrap: break-word; white-space: normal;">
                                                    <MudText Class="font-weight-bold" Style="min-width: 140px;">Carpark ID:</MudText>
                                                    <MudText Style="flex: 1;">@col.Carpark.CarparkId</MudText>
                                                </div>
                                                <div class="d-flex" style="word-wrap: break-word; white-space: normal;">
                                                    <MudText Class="font-weight-bold" Style="min-width: 140px;">Carpark Address:</MudText>
                                                    <MudText Style="flex: 1;">@col.Carpark.Address</MudText>
                                                </div>
                                                <div class="d-flex" style="word-wrap: break-word; white-space: normal;">
                                                    <MudText Class="font-weight-bold" Style="min-width: 140px;">Vehicle:</MudText>
                                                    <MudText Style="flex: 1;">@col.Vehicle.LicensePlate</MudText>
                                                </div>
                                                <div class="d-flex" style="word-wrap: break-word; white-space: normal;">
                                                    <MudText Class="font-weight-bold" Style="min-width: 140px;">Start Time:</MudText>
                                                    <MudText Style="flex: 1;">@col.StartTime?.ToString("dd MMMM yyyy hh:mm tt ")</MudText>
                                                </div>
                                                <div class="d-flex" style="word-wrap: break-word; white-space: normal;">
                                                    <MudText Class="font-weight-bold" Style="min-width: 140px;">End Time:</MudText>
                                                    <MudText Style="flex: 1;">@col.EndTime?.ToString("dd MMMM yyyy hh:mm tt ")</MudText>
                                                </div>
                                                <div class="d-flex" style="word-wrap: break-word; white-space: normal;">
                                                    <MudText Class="font-weight-bold" Style="min-width: 140px;">Cost:</MudText>
                                                    <MudText Style="flex: 1;">$@col.Cost.ToString("F2")</MudText>
                                                </div>
                                            </div>
                                        </MudCardContent>
                                    </MudCard>
                                </MudTr>
                            }
                        </ChildRowContent>
                    </MudTable>
                </div>
            </MudContainer>
        </MudPaper>
    </Authorized> 
</AuthorizeView>


@code {
    private IEnumerable<Booking> User_Bookings = new List<Booking>();
    private HashSet<Booking> expandedRows = new HashSet<Booking>();
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        username = authState.User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.Name)?.Value;
        if (!string.IsNullOrEmpty(username))
        {
            User_Bookings = await BookingService.GetUserBookings(username);
        }
        else
        {
            User_Bookings = new List<Booking>();
        }
    }

    private Task OpenBookingInfoAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<BookingDialog>("Simple Dialog", options);
    }

    private void ToggleExpand(Booking booking)
    {
        if (expandedRows.Contains(booking))
            expandedRows.Remove(booking);
        else
            expandedRows.Add(booking);
    }
    private Color GetStatusColor(Booking.Statuses status)
    {
        return status switch
        {
            Booking.Statuses.Active => Color.Success,
            Booking.Statuses.Completed => Color.Info,
            Booking.Statuses.Cancelled => Color.Error,
            _ => Color.Default
        };
    }
}
