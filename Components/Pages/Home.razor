@page "/"
@inject ICarparkService CarparkService
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <div style="display: flex; flex-direction: column; justify-content: center; margin: 20px;">
            <MudText Typo="Typo.h2" style="margin-top:3%; margin-bottom: 10px;"Align="Align.Center">Welcome to Parknow!</MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" >Your ultimate parking solution</MudText>
        </div>
    </NotAuthorized>
    <Authorized> 
        <div class="mt-8 d-flex justify-center align-center flex-column flex-grow-1 gap-4">
                <MudText class="mr-2"Typo="Typo.h6">
                    Welcome @context.User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.Name)?.Value,
                    need a carpark?
                </MudText>
                <MudPaper Width="22em" Elevation="0"> 
                    <MudTextField Immediate="true" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
                </MudPaper>
        </div>
        <MudTable T="Carpark" class="mt-3" Items="@Carparks" OnRowClick="@NavigateToYourUrl" Height="450px" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" Virtualize="true" SortLabel="Sort By" Elevation="0" Filter="new Func<Carpark,bool>(FilterFunc)">
            <HeaderContent> 
                <MudTh><MudTableSortLabel SortBy="new Func<Carpark, object>(x=>x.CarparkId)">Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Carpark, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Carpark, object>(x=>x.Type)">Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Carpark, object>(x=>x.ShortTermParkingType)">Short Term Parking</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Carpark, object>(x=>x.FreeParking)">Free Parking</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Carpark, object>(x=>x.NightParking)">Night Parking</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy='new Func<Carpark, object>(x => (x.LotsAvailable.HasValue ? (x.LotsAvailable) : 0))'>Lots</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate Context="col">
                <MudTd DataLabel="Id">@col.CarparkId</MudTd>
                <MudTd DataLabel="Address">@col.Address</MudTd>
                <MudTd DataLabel="Type">@col.Type</MudTd>
                <MudTd DataLabel="Short Term Parking">@col.ShortTermParkingType</MudTd>
                <MudTd DataLabel="Free Parking">@col.FreeParking</MudTd>
                <MudTd DataLabel="Night Parking">@col.NightParking</MudTd>
                @if (@col.LotsAvailable == null) {
                    <MudTd DataLabel="Lots">Unavailable</MudTd>
                }
                else {
                    <MudTd DataLabel="Lots">@col.LotsAvailable</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </Authorized>
</AuthorizeView>

@code {
    public string? searchString {get; set;} 
    private IEnumerable<Carpark> Carparks = new List<Carpark>();
    protected override async Task OnInitializedAsync()
    {
        Carparks = await CarparkService.GetAllCarparks();
    }
    private bool FilterFunc(Carpark c)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (c.CarparkId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (c.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    public void NavigateToYourUrl(TableRowClickEventArgs<Carpark> cp) {
        NavigationManager.NavigateTo("/carparks/"+cp.Item.CarparkId, true);
    }
}