@page "/profile"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject ILogger<Profile> Logger

<PageTitle>Profile</PageTitle>

<AuthorizeView>
    <Authorized> 
        <div class="mt-8 d-flex justify-center align-center flex-column flex-grow-1 gap-4 pb-4">
                <MudText class="mr-2"Typo="Typo.h6">
                    Welcome @context.User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.Name)?.Value,
                </MudText>
        </div>
        <MudPaper Height="500px" Width="100%">
            <MudContainer style=@profileView Fixed="true">
                <div class="d-flex flex-row align-center justify-center pt-4">
                    <MudText class="mr-2"Typo="Typo.h6">Edit Profile</MudText>
                    <MudSpacer/>
                </div>
                 <div class="d-flex flex-column align-center justify-center pt-4">
                        <div class="d-flex flex-row align-center justify-center gap-4">
                            <MudPaper Width="100%" Elevation="0">
                                <MudTextField Placeholder="Email" Variant="Variant.Outlined" @bind-Value="model.Email" For="@(() => model.Email)"/>
                            </MudPaper>
                            <MudStaticButton FormAction="FormAction.Submit" Variant="Variant.Filled" Color="Color.Secondary">Edit</MudStaticButton>
                        </div>
                </div>
            </MudContainer>
        </MudPaper>
    </Authorized>
</AuthorizeView>

@code {
    private string profileView = "display:block;";
    private string? username;
    private User user;

    [SupplyParameterFromForm]
    private EditProfileForm model { get; set; } = new();
    public class EditProfileForm
    {
        [Required]
        public string? Email { get; set; }
        [Required]
        public string? Password { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        username = authState.User.Claims.FirstOrDefault(u => u.Type == ClaimTypes.Name)?.Value;
        if (!string.IsNullOrEmpty(username))
        {
            user = await UserService.GetUser(username);
            model.Email = user.Email;
        }
        else
        {
            // Handle the case where the username is null or empty
            user = null; // or any other appropriate action
        }
    }

}
